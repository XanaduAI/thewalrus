# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.2
jobs:
  cpptests:
    docker:
      - image: gcc:latest
    working_directory: ~/circleci-googletest
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - run:
          name: Install Dependencies
          command: |
            apt-get -y -q update
            apt-get -y -q install cmake gcc libomp-dev
      - run:
          name: Install Google Test
          working_directory: ~/googletest
          command: |
            wget -qO - https://github.com/google/googletest/archive/release-1.8.1.tar.gz | tar -xz
            cmake -D CMAKE_INSTALL_PREFIX:PATH=$HOME/googletest -D CMAKE_BUILD_TYPE=Release googletest-release-1.8.1
            make install
      - checkout
      - run:
          name: Build unit tests
          command: |
            cd tests
            GOOGLETEST_DIR=/root/googletest make cpptests
      - run:
          name: Run unit tests
          command: |
            cd tests && ./cpptests

  pythoncoverage:
    docker:
      - image: circleci/python:3.6.8-stretch
    working_directory: ~/tests
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            sudo apt-get -qq update;
            sudo apt-get install -y gcc;
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install pytest pytest-cov pytest-randomly wheel codecov
            pip install -e .
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make coverage
      - codecov/upload:
          file: coverage.xml


  linux-wheels:
    working_directory: ~/linux-wheels
    docker:
      - image: circleci/python:3.6.12-stretch
    environment:
      CIBW_BUILD: 'cp37-* cp38-* cp39-*'
      CIBW_BEFORE_BUILD_LINUX: pip install numpy==1.19.5 scipy cython
      CIBW_TEST_REQUIRES: numpy scipy pytest pytest-cov pytest-randomly
      CIBW_TEST_COMMAND: python -m pytest --randomly-seed=137 {project}/thewalrus
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build the Linux wheels.
          command: |
            pip install --user cibuildwheel==1.10
            python -m cibuildwheel --output-dir wheelhouse
      - run:
          name: Upload Linux wheels.
          filters:
            branches:
              only: master
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "Uploading wheels..."
              pip install --user https://github.com/joerick/libcloud/archive/v1.5.0-s3fix.zip wheelhouse-uploader
              python -m wheelhouse_uploader upload --provider-name S3 --local-folder wheelhouse/ xanadu-wheels
            else
              echo "Not on master, not deploying."
            fi
      - store_artifacts:
          path: wheelhouse/

  osx-wheels:
    working_directory: ~/osx-wheels
    macos:
      xcode: "12.3.0"
    environment:
      CIBW_BUILD: 'cp37-* cp38-* cp39-*'
      CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET=10.9"

      CIBW_BEFORE_BUILD_MACOS: brew install gmp gcc libomp; pip install numpy==1.19.5 scipy cython
      CIBW_TEST_REQUIRES: numpy scipy pytest pytest-cov pytest-randomly
      CIBW_TEST_COMMAND: python -m pytest --randomly-seed=137 {project}/thewalrus
    steps:
      - checkout
      - run:
          name: Build the OS X wheels.
          command: |
            pip3 install --user cibuildwheel
            export PATH=$PATH:/Users/distiller/Library/Python/3.9/bin
            cibuildwheel --output-dir wheelhouse
      - run:
          name: Upload OS X wheels.
          filters:
            branches:
              only: master
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "Uploading wheels..."
              pip3 install wheelhouse-uploader
              python3 -m wheelhouse_uploader upload --provider-name S3 --local-folder wheelhouse/ xanadu-wheels
            else
              echo "Not on master, not deploying."
            fi
      - store_artifacts:
          path: wheelhouse/

workflows:
  version: 2
  all-tests:
    jobs:
      - cpptests
      - linux-wheels
      - osx-wheels
